
import sys
import json
import os
import numpy as np
import time
from collections import Counter

"""
给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。

示例 :
输入: [1,2,1,3,2,5]
输出: [3,5]
注意：

结果输出的顺序并不重要，对于上面的例子， [5, 3] 也是正确答案。
你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？



题解：
1）暴力匹配法，hash算法统计每个key对应的valu值，熟悉Counter用法
2）异或：异或之后剩下的都是出现一次的数字
        然后x^(-x)是返回最后一个数，再拿这个数有与的，且异或一下原数就是另外一个数
"""

def singleNumber(nums:list):
    hashmap = Counter(nums)
    return [key for key in hashmap.keys() if hashmap[key] == 1]

def singleNumber_v2(nums:list):
    x = 0
    for num in nums:
        x = x ^ num
    diff = x & (-x) ###是与  按位和相反数与，就剩最后一位进来的数字

    single = 0
    for num in nums:
        if num & diff:
            single ^= num
    return [single, x^single]

if __name__ == '__main__':
    
    input = [7,6,4,3,1]
    input = [2,1,2,3,4,1]
    
    t1 = time.time()
    output = singleNumber(input)
    output2 = singleNumber_v2(input)
    t2 = time.time()
    print(output, output2)
    print ('timecost~~~~~~~~~~~~~:', t2-t1)
